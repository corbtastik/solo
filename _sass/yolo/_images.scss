// ----------------------------------------------------------------------------
// Variables used in _images.scss
// ----------------------------------------------------------------------------
$thumbnail-width: 128px;
$ratio-1-by-1: 16 24 32 48 64 96 128 192 256 384 448 512 640;
$ratio-4-by-3: 100 120 128 160 200 240 256 320 400 480 512 640;
$ratio-3-by-4:  75  90  96 120 150 180 192 240 300 360 384 480;
$ratio-16-by-9: 112 128 144 160 192 224 256 320 400 480 512 640;
$ratio-9-by-16:  63  72  81  90 108 126 144 180 225 270 288 360;
// ----------------------------------------------------------------------------
// Base styles for image related HTML elements.
// ----------------------------------------------------------------------------
img {
  display: block;
  position: relative;
  width: auto;
  height: auto;
  max-width: 100%;
  border-radius: 0.5em;
  &.link {
    //transition: 1s;
    &:is(:hover) {
      //opacity: 0.7;
      //filter: grayscale(100%);
    }
  }
  &.center {
    margin: 0 auto;
  }
  &.radius {
    border-radius: 0.5em;
  }
  &.thumbnail {
    object-fit: cover;
    width: $thumbnail-width;
    height: $thumbnail-width;
    border-radius: .128em;
    &.max {
      width: nth($ratio-1-by-1, -1) * 1px;
      height: nth($ratio-1-by-1, -1) * 1px;
      border-radius: #{nth($ratio-1-by-1, -1) / 1000}em;
    }
  }
  &.circle {
    border-radius: 50%;
  }
  // full 1 by 1 aspect ratios (i.e. is-128-x-128) with .max
  @each $dimension in $ratio-1-by-1 {
    &.is-#{$dimension}-x-#{$dimension} {
      width: $dimension * 1px;
      height: $dimension * 1px;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-1-by-1, -1) * 1px;
        height: nth($ratio-1-by-1, -1) * 1px;
        border-radius: #{nth($ratio-1-by-1, -1) / 1000}em;
      }
    }
  }
  // short 1 by 1 aspect ratios (i.e. is-128) with .max
  @each $dimension in $ratio-1-by-1 {
    &.is-#{$dimension} {
      width: $dimension * 1px;
      height: $dimension * 1px;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-1-by-1, -1) * 1px;
        height: nth($ratio-1-by-1, -1) * 1px;
        border-radius: #{nth($ratio-1-by-1, -1) / 1000}em;
      }
    }
  }
  // 4 by 3 aspect ratios (i.e. is-400-by-300) with .max
  @each $dimension in $ratio-4-by-3 {
    &.is-#{$dimension}-by-#{$dimension * 3/4} {
      width: $dimension * 1px;
      aspect-ratio: 4/3;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-4-by-3, -1) * 1px;
        height: nth($ratio-3-by-4, -1) * 1px;
        border-radius: #{nth($ratio-4-by-3, -1) / 1000}em;
      }
    }
  }
  // 3 by 4 aspect ratios (i.e. is-300-by-400) with .max
  @each $dimension in $ratio-3-by-4 {
    &.is-#{$dimension}-by-#{$dimension * 4/3} {
      width: $dimension * 1px;
      aspect-ratio: 3/4;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-3-by-4, -1) * 1px;
        height: nth($ratio-4-by-3, -1) * 1px;
        border-radius: #{nth($ratio-3-by-4, -1) / 1000}em;
      }
    }
  }
  // 16 by 9 aspect ratios (i.e. is-400-by-225) with .max
  @each $dimension in $ratio-16-by-9 {
    &.is-#{$dimension}-by-#{$dimension * 9/16} {
      width: $dimension * 1px;
      aspect-ratio: 16/9;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-16-by-9, -1) * 1px;
        height: nth($ratio-9-by-16, -1) * 1px;
        border-radius: #{nth($ratio-16-by-9, -1) / 1000}em;
      }
    }
  }
  // 9 by 16 aspect ratios (i.e. is-225-by-400) with .max
  @each $dimension in $ratio-9-by-16 {
    &.is-#{$dimension}-by-#{$dimension * 16/9} {
      width: $dimension * 1px;
      aspect-ratio: 9/16;
      object-fit: cover;
      border-radius: #{$dimension / 1000}em;
      &.max {
        width: nth($ratio-9-by-16, -1) * 1px;
        height: nth($ratio-16-by-9, -1) * 1px;
        border-radius: #{nth($ratio-9-by-16, -1) / 1000}em;
      }
    }
  }
  // circle sizes (i.e. is-circle-128) with .max
  @each $dimension in $ratio-1-by-1 {
    &.is-circle-#{$dimension} {
      height: $dimension * 1px;
      width: $dimension * 1px;
      object-fit: cover;
      border-radius: 50%;
      &.max {
        width: nth($ratio-1-by-1, -1) * 1px;
        height: nth($ratio-1-by-1, -1) * 1px;
      }
    }
  }
}
// ----------------------------------------------------------------------------
// Styles for an image grid (flexbox) elements.
// ----------------------------------------------------------------------------
.image-item {
  border-radius: 0.3rem;
  margin: 1rem 0;
  position: relative;
  text-align: center;
  width: 100%;
  aspect-ratio: 1/1;
  object-fit: cover;
}

// ----------------------------------------------------------------------------
// Styles for an image modal (pop out).
// ----------------------------------------------------------------------------
.image-modal {
  display: none;
  position: fixed;
  z-index: 1;
  padding-top: 100px;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: $background-darker-color;
}

.image-modal-content {
  margin: auto;
  display: block;
  width: 80%;
  max-width: 100%;
}

#image-modal-caption {
  margin: auto;
  display: block;
  width: 80%;
  max-width: 100%;
  text-align: center;
  color: $text-color;
  padding: 10px 0;
  height: 150px;
}

.image-modal-content, #image-modal-caption {
  animation-name: zoom;
  animation-duration: 0.6s;
}

@keyframes zoom {
  from {transform:scale(0)}
  to {transform:scale(1)}
}

.image-modal-close {
  position: absolute;
  top: 15px;
  right: 35px;
  color: $accent-color;
  font-size: 40px;
  font-weight: bold;
  transition: 0.3s;
}

.image-modal-close:hover,
.image-modal-close:focus {
  color: $text-color;
  text-decoration: none;
  cursor: pointer;
}